
AVRASM ver. 2.1.30  D:\Dropbox\AI Electronics\BLOG\PCF8575 IO EXPANDER UNTUK LCD dan KEYPAD\CODE\List\pcf8575_lcd_keypad.asm Tue Oct 10 09:24:52 2017

D:\Dropbox\AI Electronics\BLOG\PCF8575 IO EXPANDER UNTUK LCD dan KEYPAD\CODE\List\pcf8575_lcd_keypad.asm(1074): warning: Register r4 already defined by the .DEF directive
D:\Dropbox\AI Electronics\BLOG\PCF8575 IO EXPANDER UNTUK LCD dan KEYPAD\CODE\List\pcf8575_lcd_keypad.asm(1075): warning: Register r3 already defined by the .DEF directive
D:\Dropbox\AI Electronics\BLOG\PCF8575 IO EXPANDER UNTUK LCD dan KEYPAD\CODE\List\pcf8575_lcd_keypad.asm(1076): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega328P
                 ;Program type             : Application
                 ;Clock frequency          : 20,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Speed
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2303
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _baris_lcd=R4
                 	.DEF _display_control=R3
                 	.DEF _display_mode=R6
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000034 2710
000035 03e8
000036 0064
000037 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000038 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000039 1000
00003a 0100
00003b 0010
00003c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x2A:
D:\Dropbox\AI Electronics\BLOG\PCF8575 IO EXPANDER UNTUK LCD dan KEYPAD\CODE\List\pcf8575_lcd_keypad.asm(1122): warning: .cseg .db misalignment - padding zero byte
00003d 0002      	.DB  0x2
                 _0x0:
00003e 5942
00003f 3a20
000040 4100
000041 2d49      	.DB  0x42,0x59,0x20,0x3A,0x0,0x41,0x49,0x2D
000042 4c45
000043 4b45
000044 5254
000045 4e4f      	.DB  0x45,0x4C,0x45,0x4B,0x54,0x52,0x4F,0x4E
000046 4b49
D:\Dropbox\AI Electronics\BLOG\PCF8575 IO EXPANDER UNTUK LCD dan KEYPAD\CODE\List\pcf8575_lcd_keypad.asm(1126): warning: .cseg .db misalignment - padding zero byte
000047 0000      	.DB  0x49,0x4B,0x0
                 _0x2020060:
D:\Dropbox\AI Electronics\BLOG\PCF8575 IO EXPANDER UNTUK LCD dan KEYPAD\CODE\List\pcf8575_lcd_keypad.asm(1128): warning: .cseg .db misalignment - padding zero byte
000048 0001      	.DB  0x1
                 _0x2020000:
000049 4e2d
00004a 4e41
00004b 4900
00004c 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Dropbox\AI Electronics\BLOG\PCF8575 IO EXPANDER UNTUK LCD dan KEYPAD\CODE\List\pcf8575_lcd_keypad.asm(1131): warning: .cseg .db misalignment - padding zero byte
00004d 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004e 0005      	.DW  0x05
00004f 0300      	.DW  _0x19
000050 007c      	.DW  _0x0*2
                 
000051 000e      	.DW  0x0E
000052 0305      	.DW  _0x19+5
000053 0081      	.DW  _0x0*2+5
                 
000054 0001      	.DW  0x01
000055 0004      	.DW  0x04
000056 007a      	.DW  _0x2A*2
                 
000057 0001      	.DW  0x01
000058 0313      	.DW  __seed_G101
000059 0090      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00005a 0000      	.DW  0
                 
                 __RESET:
00005b 94f8      	CLI
00005c 27ee      	CLR  R30
00005d bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005e e0f1      	LDI  R31,1
00005f bff5      	OUT  MCUCR,R31
000060 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000061 e1f8      	LDI  R31,0x18
000062 95a8      	WDR
000063 b7a4      	IN   R26,MCUSR
000064 7fa7      	CBR  R26,8
000065 bfa4      	OUT  MCUSR,R26
000066 93f0 0060 	STS  WDTCSR,R31
000068 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
00006a e08d      	LDI  R24,(14-2)+1
00006b e0a2      	LDI  R26,2
00006c 27bb      	CLR  R27
                 __CLEAR_REG:
00006d 93ed      	ST   X+,R30
00006e 958a      	DEC  R24
00006f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000070 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000071 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000072 e0a0      	LDI  R26,LOW(__SRAM_START)
000073 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000074 93ed      	ST   X+,R30
000075 9701      	SBIW R24,1
000076 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000077 e9ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000078 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000079 9185      	LPM  R24,Z+
00007a 9195      	LPM  R25,Z+
00007b 9700      	SBIW R24,0
00007c f061      	BREQ __GLOBAL_INI_END
00007d 91a5      	LPM  R26,Z+
00007e 91b5      	LPM  R27,Z+
00007f 9005      	LPM  R0,Z+
000080 9015      	LPM  R1,Z+
000081 01bf      	MOVW R22,R30
000082 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000083 9005      	LPM  R0,Z+
000084 920d      	ST   X+,R0
000085 9701      	SBIW R24,1
000086 f7e1      	BRNE __GLOBAL_INI_LOOP
000087 01fb      	MOVW R30,R22
000088 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000089 e0e0      	LDI  R30,__GPIOR0_INIT
00008a bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008b efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008c bfed      	OUT  SPL,R30
00008d e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008f e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000090 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000091 940c 018f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <twi2.h>
                 
                 	.CSEG
                 _twiinit:
000093 e0e0      	LDI  R30,LOW(0)
000094 93e0 00b9 	STS  185,R30
000096 e0ec      	LDI  R30,LOW(12)
000097 93e0 00b8 	STS  184,R30
000099 e0e4      	LDI  R30,LOW(4)
00009a c009      	RJMP _0x20A0005
                 _twistart:
00009b eae4      	LDI  R30,LOW(164)
00009c 93e0 00bc 	STS  188,R30
                 _0x3:
00009e 91e0 00bc 	LDS  R30,188
0000a0 78e0      	ANDI R30,LOW(0x80)
0000a1 f3e1      	BREQ _0x3
0000a2 9508      	RET
                 _twistop:
0000a3 e9e4      	LDI  R30,LOW(148)
                 _0x20A0005:
0000a4 93e0 00bc 	STS  188,R30
0000a6 9508      	RET
                 _twiwrite:
0000a7 93aa      	ST   -Y,R26
                 ;	data -> Y+0
0000a8 81e8      	LD   R30,Y
0000a9 93e0 00bb 	STS  187,R30
0000ab e8e4      	LDI  R30,LOW(132)
0000ac 93e0 00bc 	STS  188,R30
                 _0x6:
0000ae 91e0 00bc 	LDS  R30,188
0000b0 78e0      	ANDI R30,LOW(0x80)
0000b1 f3e1      	BREQ _0x6
0000b2 c05f      	RJMP _0x20A0004
                 _twiread:
0000b3 93aa      	ST   -Y,R26
                 ;	ack -> Y+0
0000b4 81e8      	LD   R30,Y
0000b5 e0f0      	LDI  R31,0
0000b6 30e1      	CPI  R30,LOW(0x1)
0000b7 e0a0      	LDI  R26,HIGH(0x1)
0000b8 07fa      	CPC  R31,R26
0000b9 f451      	BRNE _0xC
0000ba ece4      	LDI  R30,LOW(196)
0000bb 93e0 00bc 	STS  188,R30
                 _0xD:
0000bd 91e0 00bc 	LDS  R30,188
0000bf 78e0      	ANDI R30,LOW(0x80)
0000c0 f3e1      	BREQ _0xD
0000c1 91e0 00bb 	LDS  R30,187
0000c3 c04e      	RJMP _0x20A0004
                 _0xC:
0000c4 9730      	SBIW R30,0
0000c5 f451      	BRNE _0xB
0000c6 e8e4      	LDI  R30,LOW(132)
0000c7 93e0 00bc 	STS  188,R30
                 _0x11:
0000c9 91e0 00bc 	LDS  R30,188
0000cb 78e0      	ANDI R30,LOW(0x80)
0000cc f3e1      	BREQ _0x11
0000cd 91e0 00bb 	LDS  R30,187
0000cf c042      	RJMP _0x20A0004
                 _0xB:
0000d0 c041      	RJMP _0x20A0004
                 ;#include <i2c_lcd.c>
                 ;#define lcdw 0b01001110
                 ;#define lcdr 0b01001111
                 ;
                 ;#define en   0b00000100
                 ;#define rw   0b00000010
                 ;#define rs   0b00000001
                 ;#define backon 0x08
                 ;#define backoff 0x00
                 ;
                 ;//unsigned char kolom_lcd=16;
                 ;unsigned char baris_lcd=2;
                 ;//unsigned char charsize=0;
                 ;unsigned char display_control;
                 ;unsigned char display_mode;
                 ;
                 ;void expander_write(unsigned char data){
                 ; 0000 0006 void expander_write(unsigned char data){
                 _expander_write:
                 ;twistart();
0000d1 93aa      	ST   -Y,R26
                 ;	data -> Y+0
0000d2 dfc8      	RCALL _twistart
                 ;twiwrite(lcdw);
0000d3 e4ae      	LDI  R26,LOW(78)
0000d4 dfd2      	RCALL _twiwrite
                 ;twiwrite(data | backon);
0000d5 81e8      	LD   R30,Y
0000d6 60e8      	ORI  R30,8
0000d7 2fae      	MOV  R26,R30
0000d8 dfce      	RCALL _twiwrite
                 ;twiwrite(0xff);
0000d9 efaf      	LDI  R26,LOW(255)
0000da dfcc      	RCALL _twiwrite
                 ;twistop();
0000db dfc7      	RCALL _twistop
                 ;}
0000dc c035      	RJMP _0x20A0004
                 ;
                 ;void pulse_enable(unsigned char data){
                 _pulse_enable:
                 ;expander_write(data | en);
0000dd 93aa      	ST   -Y,R26
                 ;	data -> Y+0
0000de 81e8      	LD   R30,Y
0000df 60e4      	ORI  R30,4
0000e0 2fae      	MOV  R26,R30
0000e1 dfef      	RCALL _expander_write
                 ;delay_us(1);
                +
0000e2 e087     +LDI R24 , LOW ( 7 )
                +__DELAY_USB_LOOP :
0000e3 958a     +DEC R24
0000e4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 7
                 ;expander_write(data & ~en);
0000e5 81e8      	LD   R30,Y
0000e6 7feb      	ANDI R30,0xFB
0000e7 2fae      	MOV  R26,R30
0000e8 dfe8      	RCALL _expander_write
                 ;delay_us(50);
                +
0000e9 ef8a     +LDI R24 , LOW ( 250 )
0000ea e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
0000eb 9701     +SBIW R24 , 1
0000ec f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
                 ;}
0000ed c024      	RJMP _0x20A0004
                 ;
                 ;void write4bits(unsigned char data){
                 _write4bits:
                 ;expander_write(data);
0000ee 93aa      	ST   -Y,R26
                 ;	data -> Y+0
0000ef 81a8      	LD   R26,Y
0000f0 dfe0      	RCALL _expander_write
                 ;pulse_enable(data);
0000f1 81a8      	LD   R26,Y
0000f2 dfea      	RCALL _pulse_enable
                 ;}
0000f3 c01e      	RJMP _0x20A0004
                 ;
                 ;void send(unsigned char data,unsigned char mode){
                 _send:
                 ;unsigned char high=data&0xf0;
                 ;unsigned char low=(data<<4)&0xf0;
                 ;write4bits((high)|mode);
0000f4 93aa      	ST   -Y,R26
0000f5 931a      	ST   -Y,R17
0000f6 930a      	ST   -Y,R16
                 ;	data -> Y+3
                 ;	mode -> Y+2
                 ;	high -> R17
                 ;	low -> R16
0000f7 81eb      	LDD  R30,Y+3
0000f8 7fe0      	ANDI R30,LOW(0xF0)
0000f9 2f1e      	MOV  R17,R30
0000fa 81eb      	LDD  R30,Y+3
0000fb 95e2      	SWAP R30
0000fc 7fe0      	ANDI R30,LOW(0xF0)
0000fd 2f0e      	MOV  R16,R30
0000fe 81aa      	LDD  R26,Y+2
0000ff 2ba1      	OR   R26,R17
000100 dfed      	RCALL _write4bits
                 ;write4bits((low)|mode);
000101 81aa      	LDD  R26,Y+2
000102 2ba0      	OR   R26,R16
000103 dfea      	RCALL _write4bits
                 ;}
000104 8119      	LDD  R17,Y+1
000105 8108      	LDD  R16,Y+0
000106 9624      	ADIW R28,4
000107 9508      	RET
                 ;
                 ;void command(unsigned char data){
                 _command:
                 ;send(data,0);
000108 93aa      	ST   -Y,R26
                 ;	data -> Y+0
000109 81e8      	LD   R30,Y
00010a 93ea      	ST   -Y,R30
00010b e0a0      	LDI  R26,LOW(0)
00010c c004      	RJMP _0x20A0003
                 ;}
                 ;
                 ;void write(char data){
                 _write:
                 ;send(data,rs);
00010d 93aa      	ST   -Y,R26
                 ;	data -> Y+0
00010e 81e8      	LD   R30,Y
00010f 93ea      	ST   -Y,R30
000110 e0a1      	LDI  R26,LOW(1)
                 _0x20A0003:
000111 dfe2      	RCALL _send
                 ;}
                 _0x20A0004:
000112 9621      	ADIW R28,1
000113 9508      	RET
                 ;
                 ;void clear(){
                 _clear:
                 ;command(0x01); //lcd clear display command
000114 e0a1      	LDI  R26,LOW(1)
000115 c008      	RJMP _0x20A0002
                 ;delay_ms(2);
                 ;}
                 ;
                 ;void display(){
                 _display:
                 ;    display_control|=0x04;//lcd display on
000116 e0e4      	LDI  R30,LOW(4)
000117 2a3e      	OR   R3,R30
                 ;    command(0x08 | display_control); //0x08=lcd display control
000118 2de3      	MOV  R30,R3
000119 60e8      	ORI  R30,8
00011a 2fae      	MOV  R26,R30
00011b dfec      	RCALL _command
                 ;}
00011c 9508      	RET
                 ;
                 ;void home(){
                 _home:
                 ;    command(0x02); // lcd kembali ke posisi 0,0
00011d e0a2      	LDI  R26,LOW(2)
                 _0x20A0002:
00011e dfe9      	RCALL _command
                 ;    delay_ms(2);
00011f e0a2      	LDI  R26,LOW(2)
000120 e0b0      	LDI  R27,0
000121 940e 0256 	CALL _delay_ms
                 ;}
000123 9508      	RET
                 ;
                 ;void gotoxy(unsigned char x,unsigned char y){
                 _gotoxy:
                 ;    int row_offsets[]={0x00,0x40,0x14,0x54};
                 ;    if(y>baris_lcd)y=baris_lcd-1;
000124 93aa      	ST   -Y,R26
000125 9728      	SBIW R28,8
000126 e0e0      	LDI  R30,LOW(0)
000127 83e8      	ST   Y,R30
000128 83e9      	STD  Y+1,R30
000129 e4e0      	LDI  R30,LOW(64)
00012a 83ea      	STD  Y+2,R30
00012b e0e0      	LDI  R30,LOW(0)
00012c 83eb      	STD  Y+3,R30
00012d e1e4      	LDI  R30,LOW(20)
00012e 83ec      	STD  Y+4,R30
00012f e0e0      	LDI  R30,LOW(0)
000130 83ed      	STD  Y+5,R30
000131 e5e4      	LDI  R30,LOW(84)
000132 83ee      	STD  Y+6,R30
000133 e0e0      	LDI  R30,LOW(0)
000134 83ef      	STD  Y+7,R30
                 ;	x -> Y+9
                 ;	y -> Y+8
                 ;	row_offsets -> Y+0
000135 85a8      	LDD  R26,Y+8
000136 164a      	CP   R4,R26
000137 f418      	BRSH _0x14
000138 2de4      	MOV  R30,R4
000139 50e1      	SUBI R30,LOW(1)
00013a 87e8      	STD  Y+8,R30
                 ;    command(0x80|(x+row_offsets[y])); //0x80 = alamat ddram lcd
                 _0x14:
00013b 85e8      	LDD  R30,Y+8
00013c e0f0      	LDI  R31,0
00013d 01de      	MOVW R26,R28
00013e 0fee      	LSL  R30
00013f 1fff      	ROL  R31
000140 0fae      	ADD  R26,R30
000141 1fbf      	ADC  R27,R31
000142 91ec      	LD   R30,X
000143 85a9      	LDD  R26,Y+9
000144 0fea      	ADD  R30,R26
000145 68e0      	ORI  R30,0x80
000146 2fae      	MOV  R26,R30
000147 dfc0      	RCALL _command
                 ;}
000148 962a      	ADIW R28,10
000149 9508      	RET
                 ;
                 ;void lcd_begin(){
                 _lcd_begin:
                 ;//4 bit mode ,  lcd 1 line , lcd 5x8 per karakter
                 ;unsigned char displayfunction = 0x00 | 0x00 | 0x00;
                 ;if(baris_lcd>1)displayfunction |= 0x08; //2 line lcd
00014a 931a      	ST   -Y,R17
                 ;	displayfunction -> R17
00014b e010      	LDI  R17,0
00014c e0e1      	LDI  R30,LOW(1)
00014d 15e4      	CP   R30,R4
00014e f408      	BRSH _0x15
00014f 6018      	ORI  R17,LOW(8)
                 ;
                 ;delay_ms(50);
                 _0x15:
000150 e3a2      	LDI  R26,LOW(50)
000151 e0b0      	LDI  R27,0
000152 940e 0256 	CALL _delay_ms
                 ;
                 ;expander_write(backon);
000154 e0a8      	LDI  R26,LOW(8)
000155 df7b      	RCALL _expander_write
                 ;delay_ms(1000);
000156 eea8      	LDI  R26,LOW(1000)
000157 e0b3      	LDI  R27,HIGH(1000)
000158 940e 0256 	CALL _delay_ms
                 ;
                 ;write4bits(0x03<<4);
00015a e3a0      	LDI  R26,LOW(48)
00015b df92      	RCALL _write4bits
                 ;delay_us(4500);
                +
00015c ee84     +LDI R24 , LOW ( 22500 )
00015d e597     +LDI R25 , HIGH ( 22500 )
                +__DELAY_USW_LOOP :
00015e 9701     +SBIW R24 , 1
00015f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 22500
                 ;write4bits(0x03<<4);
000160 e3a0      	LDI  R26,LOW(48)
000161 df8c      	RCALL _write4bits
                 ;delay_us(4500);
                +
000162 ee84     +LDI R24 , LOW ( 22500 )
000163 e597     +LDI R25 , HIGH ( 22500 )
                +__DELAY_USW_LOOP :
000164 9701     +SBIW R24 , 1
000165 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 22500
                 ;write4bits(0x03<<4);
000166 e3a0      	LDI  R26,LOW(48)
000167 df86      	RCALL _write4bits
                 ;delay_us(150);
                +
000168 ee8e     +LDI R24 , LOW ( 750 )
000169 e092     +LDI R25 , HIGH ( 750 )
                +__DELAY_USW_LOOP :
00016a 9701     +SBIW R24 , 1
00016b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 750
                 ;write4bits(0x02 << 4);
00016c e2a0      	LDI  R26,LOW(32)
00016d df80      	RCALL _write4bits
                 ;command(0x20|displayfunction); //0x20 lcd function set
00016e 2fe1      	MOV  R30,R17
00016f 62e0      	ORI  R30,0x20
000170 2fae      	MOV  R26,R30
000171 df96      	RCALL _command
                 ;
                 ;// lcd display on, lcd cursor off, lcd blink off
                 ;display_control= 0x04 | 0x00 | 0x00;
000172 e0e4      	LDI  R30,LOW(4)
000173 2e3e      	MOV  R3,R30
                 ;display();
000174 dfa1      	RCALL _display
                 ;
                 ;clear();
000175 df9e      	RCALL _clear
                 ;
                 ;//lcd entryleft , lcd entry decrement
                 ;display_mode=0x02|0x00;
000176 e0e2      	LDI  R30,LOW(2)
000177 2e6e      	MOV  R6,R30
                 ;command(0x04|display_mode); //0x04 = lcd entry modeset
000178 2de6      	MOV  R30,R6
000179 60e4      	ORI  R30,4
00017a 2fae      	MOV  R26,R30
00017b df8c      	RCALL _command
                 ;
                 ;home();
00017c dfa0      	RCALL _home
                 ;}
00017d c0d6      	RJMP _0x20A0001
                 ;
                 ;void put(char *teks){
                 _put:
                 ;char k;
                 ;while (k=*teks++)write(k);
00017e 93ba      	ST   -Y,R27
00017f 93aa      	ST   -Y,R26
000180 931a      	ST   -Y,R17
                 ;	*teks -> Y+1
                 ;	k -> R17
                 _0x16:
000181 81a9      	LDD  R26,Y+1
000182 81ba      	LDD  R27,Y+1+1
000183 91ed      	LD   R30,X+
000184 83a9      	STD  Y+1,R26
000185 83ba      	STD  Y+1+1,R27
000186 2f1e      	MOV  R17,R30
000187 30e0      	CPI  R30,0
000188 f019      	BREQ _0x18
000189 2fa1      	MOV  R26,R17
00018a df82      	RCALL _write
00018b cff5      	RJMP _0x16
                 _0x18:
00018c 8118      	LDD  R17,Y+0
00018d 9623      	ADIW R28,3
00018e 9508      	RET
                 ;
                 ;
                 ;unsigned char baca_keypad();
                 ;
                 ;void main(void){
                 ; 0000 000A void main(void){
                 _main:
                 ; 0000 000B unsigned char buf[16];
                 ; 0000 000C #pragma optsize-
                 ; 0000 000D CLKPR=0x80;
00018f 9760      	SBIW R28,16
                 ;	buf -> Y+0
000190 e8e0      	LDI  R30,LOW(128)
000191 93e0 0061 	STS  97,R30
                 ; 0000 000E CLKPR=0x00;
000193 e0e0      	LDI  R30,LOW(0)
000194 93e0 0061 	STS  97,R30
                 ; 0000 000F #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0010 #pragma optsize+
                 ; 0000 0011 #endif
                 ; 0000 0012 
                 ; 0000 0013 twiinit();
000196 defc      	RCALL _twiinit
                 ; 0000 0014 lcd_begin();
000197 dfb2      	RCALL _lcd_begin
                 ; 0000 0015 gotoxy(0,0);
000198 e0e0      	LDI  R30,LOW(0)
000199 93ea      	ST   -Y,R30
00019a e0a0      	LDI  R26,LOW(0)
00019b df88      	RCALL _gotoxy
                 ; 0000 0016 put("BY :");
                +
00019c e0a0     +LDI R26 , LOW ( _0x19 + ( 0 ) )
00019d e0b3     +LDI R27 , HIGH ( _0x19 + ( 0 ) )
                 	__POINTW2MN _0x19,0
00019e dfdf      	RCALL _put
                 ; 0000 0017 gotoxy(0,1);
00019f e0e0      	LDI  R30,LOW(0)
0001a0 93ea      	ST   -Y,R30
0001a1 e0a1      	LDI  R26,LOW(1)
0001a2 df81      	RCALL _gotoxy
                 ; 0000 0018 put("AI-ELEKTRONIK");
                +
0001a3 e0a5     +LDI R26 , LOW ( _0x19 + ( 5 ) )
0001a4 e0b3     +LDI R27 , HIGH ( _0x19 + ( 5 ) )
                 	__POINTW2MN _0x19,5
0001a5 dfd8      	RCALL _put
                 ; 0000 0019 delay_ms(1000);
0001a6 eea8      	LDI  R26,LOW(1000)
0001a7 e0b3      	LDI  R27,HIGH(1000)
0001a8 940e 0256 	CALL _delay_ms
                 ; 0000 001A clear();
0001aa df69      	RCALL _clear
                 ; 0000 001B while (1){
                 _0x1A:
                 ; 0000 001C 
                 ; 0000 001D buf[0]=baca_keypad();buf[1]='\0';
0001ab d00a      	RCALL _baca_keypad
0001ac 83e8      	ST   Y,R30
0001ad e0e0      	LDI  R30,LOW(0)
0001ae 83e9      	STD  Y+1,R30
                 ; 0000 001E gotoxy(0,0);put(buf);
0001af 93ea      	ST   -Y,R30
0001b0 e0a0      	LDI  R26,LOW(0)
0001b1 df72      	RCALL _gotoxy
0001b2 01de      	MOVW R26,R28
0001b3 dfca      	RCALL _put
                 ; 0000 001F }
0001b4 cff6      	RJMP _0x1A
                 ; 0000 0020 }
                 _0x1D:
0001b5 cfff      	RJMP _0x1D
                 
                 	.DSEG
                 _0x19:
000300           	.BYTE 0x13
                 ;
                 ;unsigned char baca_keypad(){
                 ; 0000 0022 unsigned char baca_keypad(){
                 
                 	.CSEG
                 _baca_keypad:
                 ; 0000 0023 unsigned char key;
                 ; 0000 0024 twistart();
0001b6 931a      	ST   -Y,R17
                 ;	key -> R17
0001b7 dee3      	RCALL _twistart
                 ; 0000 0025 twiwrite(0b01001110);
0001b8 e4ae      	LDI  R26,LOW(78)
0001b9 deed      	RCALL _twiwrite
                 ; 0000 0026 twiwrite(0x00);
0001ba e0a0      	LDI  R26,LOW(0)
0001bb deeb      	RCALL _twiwrite
                 ; 0000 0027 twiwrite(0xf6);
0001bc efa6      	LDI  R26,LOW(246)
0001bd dee9      	RCALL _twiwrite
                 ; 0000 0028 twistop();
0001be dee4      	RCALL _twistop
                 ; 0000 0029 
                 ; 0000 002A twistart();
0001bf dedb      	RCALL _twistart
                 ; 0000 002B twiwrite(0b01001111);
0001c0 e4af      	LDI  R26,LOW(79)
0001c1 dee5      	RCALL _twiwrite
                 ; 0000 002C twiread(1);
0001c2 e0a1      	LDI  R26,LOW(1)
0001c3 deef      	RCALL _twiread
                 ; 0000 002D key=twiread(0);
0001c4 e0a0      	LDI  R26,LOW(0)
0001c5 deed      	RCALL _twiread
0001c6 2f1e      	MOV  R17,R30
                 ; 0000 002E twistop();
0001c7 dedb      	RCALL _twistop
                 ; 0000 002F 
                 ; 0000 0030 if( ((key>>4)&1)==0)return '1';
0001c8 2fe1      	MOV  R30,R17
0001c9 e0f0      	LDI  R31,0
0001ca 940e 0269 	CALL __ASRW4
0001cc 70e1      	ANDI R30,LOW(0x1)
0001cd f411      	BRNE _0x1E
0001ce e3e1      	LDI  R30,LOW(49)
0001cf c084      	RJMP _0x20A0001
                 ; 0000 0031 if( ((key>>5)&1)==0)return '4';
                 _0x1E:
0001d0 2fa1      	MOV  R26,R17
0001d1 e0b0      	LDI  R27,0
0001d2 e0e5      	LDI  R30,LOW(5)
0001d3 940e 0260 	CALL __ASRW12
0001d5 70e1      	ANDI R30,LOW(0x1)
0001d6 f411      	BRNE _0x1F
0001d7 e3e4      	LDI  R30,LOW(52)
0001d8 c07b      	RJMP _0x20A0001
                 ; 0000 0032 if( ((key>>6)&1)==0)return '7';
                 _0x1F:
0001d9 2fa1      	MOV  R26,R17
0001da e0b0      	LDI  R27,0
0001db e0e6      	LDI  R30,LOW(6)
0001dc 940e 0260 	CALL __ASRW12
0001de 70e1      	ANDI R30,LOW(0x1)
0001df f411      	BRNE _0x20
0001e0 e3e7      	LDI  R30,LOW(55)
0001e1 c072      	RJMP _0x20A0001
                 ; 0000 0033 if( ((key>>7)&1)==0)return '*';
                 _0x20:
0001e2 2fa1      	MOV  R26,R17
0001e3 e0b0      	LDI  R27,0
0001e4 e0e7      	LDI  R30,LOW(7)
0001e5 940e 0260 	CALL __ASRW12
0001e7 70e1      	ANDI R30,LOW(0x1)
0001e8 f411      	BRNE _0x21
0001e9 e2ea      	LDI  R30,LOW(42)
0001ea c069      	RJMP _0x20A0001
                 ; 0000 0034 
                 ; 0000 0035 twistart();
                 _0x21:
0001eb deaf      	RCALL _twistart
                 ; 0000 0036 twiwrite(0b01001110);
0001ec e4ae      	LDI  R26,LOW(78)
0001ed deb9      	RCALL _twiwrite
                 ; 0000 0037 twiwrite(0x00);
0001ee e0a0      	LDI  R26,LOW(0)
0001ef deb7      	RCALL _twiwrite
                 ; 0000 0038 twiwrite(0xf5);
0001f0 efa5      	LDI  R26,LOW(245)
0001f1 deb5      	RCALL _twiwrite
                 ; 0000 0039 twistop();
0001f2 deb0      	RCALL _twistop
                 ; 0000 003A 
                 ; 0000 003B twistart();
0001f3 dea7      	RCALL _twistart
                 ; 0000 003C twiwrite(0b01001111);
0001f4 e4af      	LDI  R26,LOW(79)
0001f5 deb1      	RCALL _twiwrite
                 ; 0000 003D twiread(1);
0001f6 e0a1      	LDI  R26,LOW(1)
0001f7 debb      	RCALL _twiread
                 ; 0000 003E key=twiread(0);
0001f8 e0a0      	LDI  R26,LOW(0)
0001f9 deb9      	RCALL _twiread
0001fa 2f1e      	MOV  R17,R30
                 ; 0000 003F twistop();
0001fb dea7      	RCALL _twistop
                 ; 0000 0040 
                 ; 0000 0041 if( ((key>>4)&1)==0)return '2';
0001fc 2fe1      	MOV  R30,R17
0001fd e0f0      	LDI  R31,0
0001fe 940e 0269 	CALL __ASRW4
000200 70e1      	ANDI R30,LOW(0x1)
000201 f411      	BRNE _0x22
000202 e3e2      	LDI  R30,LOW(50)
000203 c050      	RJMP _0x20A0001
                 ; 0000 0042 if( ((key>>5)&1)==0)return '5';
                 _0x22:
000204 2fa1      	MOV  R26,R17
000205 e0b0      	LDI  R27,0
000206 e0e5      	LDI  R30,LOW(5)
000207 940e 0260 	CALL __ASRW12
000209 70e1      	ANDI R30,LOW(0x1)
00020a f411      	BRNE _0x23
00020b e3e5      	LDI  R30,LOW(53)
00020c c047      	RJMP _0x20A0001
                 ; 0000 0043 if( ((key>>6)&1)==0)return '8';
                 _0x23:
00020d 2fa1      	MOV  R26,R17
00020e e0b0      	LDI  R27,0
00020f e0e6      	LDI  R30,LOW(6)
000210 940e 0260 	CALL __ASRW12
000212 70e1      	ANDI R30,LOW(0x1)
000213 f411      	BRNE _0x24
000214 e3e8      	LDI  R30,LOW(56)
000215 c03e      	RJMP _0x20A0001
                 ; 0000 0044 if( ((key>>7)&1)==0)return '0';
                 _0x24:
000216 2fa1      	MOV  R26,R17
000217 e0b0      	LDI  R27,0
000218 e0e7      	LDI  R30,LOW(7)
000219 940e 0260 	CALL __ASRW12
00021b 70e1      	ANDI R30,LOW(0x1)
00021c f411      	BRNE _0x25
00021d e3e0      	LDI  R30,LOW(48)
00021e c035      	RJMP _0x20A0001
                 ; 0000 0045 
                 ; 0000 0046 twistart();
                 _0x25:
00021f de7b      	RCALL _twistart
                 ; 0000 0047 twiwrite(0b01001110);
000220 e4ae      	LDI  R26,LOW(78)
000221 de85      	RCALL _twiwrite
                 ; 0000 0048 twiwrite(0x00);
000222 e0a0      	LDI  R26,LOW(0)
000223 de83      	RCALL _twiwrite
                 ; 0000 0049 twiwrite(0xf3);
000224 efa3      	LDI  R26,LOW(243)
000225 de81      	RCALL _twiwrite
                 ; 0000 004A twistop();
000226 de7c      	RCALL _twistop
                 ; 0000 004B 
                 ; 0000 004C twistart();
000227 de73      	RCALL _twistart
                 ; 0000 004D twiwrite(0b01001111);
000228 e4af      	LDI  R26,LOW(79)
000229 de7d      	RCALL _twiwrite
                 ; 0000 004E twiread(1);
00022a e0a1      	LDI  R26,LOW(1)
00022b de87      	RCALL _twiread
                 ; 0000 004F key=twiread(0);
00022c e0a0      	LDI  R26,LOW(0)
00022d de85      	RCALL _twiread
00022e 2f1e      	MOV  R17,R30
                 ; 0000 0050 twistop();
00022f de73      	RCALL _twistop
                 ; 0000 0051 
                 ; 0000 0052 if( ((key>>4)&1)==0)return '3';
000230 2fe1      	MOV  R30,R17
000231 e0f0      	LDI  R31,0
000232 940e 0269 	CALL __ASRW4
000234 70e1      	ANDI R30,LOW(0x1)
000235 f411      	BRNE _0x26
000236 e3e3      	LDI  R30,LOW(51)
000237 c01c      	RJMP _0x20A0001
                 ; 0000 0053 if( ((key>>5)&1)==0)return '6';
                 _0x26:
000238 2fa1      	MOV  R26,R17
000239 e0b0      	LDI  R27,0
00023a e0e5      	LDI  R30,LOW(5)
00023b 940e 0260 	CALL __ASRW12
00023d 70e1      	ANDI R30,LOW(0x1)
00023e f411      	BRNE _0x27
00023f e3e6      	LDI  R30,LOW(54)
000240 c013      	RJMP _0x20A0001
                 ; 0000 0054 if( ((key>>6)&1)==0)return '9';
                 _0x27:
000241 2fa1      	MOV  R26,R17
000242 e0b0      	LDI  R27,0
000243 e0e6      	LDI  R30,LOW(6)
000244 940e 0260 	CALL __ASRW12
000246 70e1      	ANDI R30,LOW(0x1)
000247 f411      	BRNE _0x28
000248 e3e9      	LDI  R30,LOW(57)
000249 c00a      	RJMP _0x20A0001
                 ; 0000 0055 if( ((key>>7)&1)==0)return '#';
                 _0x28:
00024a 2fa1      	MOV  R26,R17
00024b e0b0      	LDI  R27,0
00024c e0e7      	LDI  R30,LOW(7)
00024d 940e 0260 	CALL __ASRW12
00024f 70e1      	ANDI R30,LOW(0x1)
000250 f411      	BRNE _0x29
000251 e2e3      	LDI  R30,LOW(35)
000252 c001      	RJMP _0x20A0001
                 ; 0000 0056 
                 ; 0000 0057 return 'x';
                 _0x29:
000253 e7e8      	LDI  R30,LOW(120)
                 _0x20A0001:
000254 9119      	LD   R17,Y+
000255 9508      	RET
                 ; 0000 0058 }
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G101:
000313           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
000256 9610      	adiw r26,0
000257 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000258 e888     +LDI R24 , LOW ( 0x1388 )
000259 e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
00025a 9701     +SBIW R24 , 1
00025b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
00025c 95a8      	wdr
00025d 9711      	sbiw r26,1
00025e f7c9      	brne __delay_ms0
                 __delay_ms1:
00025f 9508      	ret
                 
                 __ASRW12:
000260 23ee      	TST  R30
000261 2e0e      	MOV  R0,R30
000262 01fd      	MOVW R30,R26
000263 f021      	BREQ __ASRW12R
                 __ASRW12L:
000264 95f5      	ASR  R31
000265 95e7      	ROR  R30
000266 940a      	DEC  R0
000267 f7e1      	BRNE __ASRW12L
                 __ASRW12R:
000268 9508      	RET
                 
                 __ASRW4:
000269 95f5      	ASR  R31
00026a 95e7      	ROR  R30
                 __ASRW3:
00026b 95f5      	ASR  R31
00026c 95e7      	ROR  R30
                 __ASRW2:
00026d 95f5      	ASR  R31
00026e 95e7      	ROR  R30
00026f 95f5      	ASR  R31
000270 95e7      	ROR  R30
000271 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   6 r1 :   1 r2 :   0 r3 :   3 r4 :   3 r5 :   0 r6 :   2 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   4 r17:  29 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  19 r25:   7 r26:  91 r27:  22 r28:   9 r29:   1 r30: 171 r31:  18 
x  :   5 y  :  56 z  :   7 
Registers used: 19 out of 35 (54.3%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   5 and   :   0 andi  :  19 asr   :   5 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  25 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  16 
cbi   :   0 cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   1 cpi   :   2 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   0 jmp   :  27 ld    :  12 ldd   :  12 ldi   : 132 
lds   :   6 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  33 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   3 
ori   :   7 out   :   7 pop   :   0 push  :   0 rcall :  66 ret   :  12 
reti  :   0 rjmp  :  27 rol   :   1 ror   :   5 sbc   :   0 sbci  :   0 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :  12 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  26 std   :  11 sts   :  12 sub   :   0 subi  :   1 swap  :   1 
tst   :   1 wdr   :   2 
Instructions used: 42 out of 116 (36.2%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004e4   1174     78   1252   32768   3.8%
[.dseg] 0x000100 0x000317      0     23     23    2303   1.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
